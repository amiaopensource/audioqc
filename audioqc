#!/usr/bin/env ruby

require 'json'
require 'csv'
require 'optparse'
load 'audioqc_methods.rb'
load_options('settings.csv')
ARGV << '-h' if ARGV.empty?

#Set up options
parser = OptionParser.new
parser.banner = "Usage: ruby audioqc2.rb [options] [inputs]"
parser.on('-o', '--output=val', "Optional output path for CSV file", String) { |val| $output_path_custom = val }
parser.on('-c', '--conch=val', "Path to optional mediaconch policy XML file", String) { |val| $conch_policy = val }
parser.on('-j', '--jpg', "Create visualizations of input files") { $visualize_yes = true }
parser.parse!

#Get targets from file or directory input(s)
targets = ARGV
file_inputs = []
qc_files = []
timestamp = Time.now.strftime('%Y-%m-%d_%H-%M-%S')

targets.each do |target|
  target =  File.expand_path(target)
  if File.directory?(target)
    targets = Dir["#{target}/**/*.{WAV,wav}"]
    targets.each {|file| file_inputs << File.expand_path(file)}
  elsif File.extname(target).downcase == '.wav'
    file_inputs << target
  end
  if file_inputs.empty?
    puts "No valid target files found! Please check inputs"
    exit
  end 
end

if File.exist?($output_path_custom.to_s)
  output_csv_path = $output_path_custom
else
  output_csv_path = ENV['HOME'] + "/Desktop/"
end
output_csv_name = "audioqc-out_#{timestamp}.csv"
output_csv = "#{output_csv_path}/#{output_csv_name}"
output_jpg_dir = "#{output_csv_path}/#{timestamp}_jpgs"

#QC each input and output to CSV
file_inputs.each {|file| qc_files << QcTarget.new(file)}

qc_files.each do |file|
  begin
    file.media_info
    file.media_conch
    file.calculatehash
    file.probe
    file.phase
    file.generate_warnings
  rescue
    file.error_warning
  end
  file.write_csv_line(output_csv)
  file.make_jpg(output_jpg_dir) if $visualize_yes
end


#Parallel version
# require 'parallel'
# #Calculate hash of audio stream
# hashes = Parallel.map(qc_files) {|file| file.calculatehash}

# hashes.each_with_index do |hash, index|
#   qc_files[index].store_hash(hash)
# end

# #Calculate FFprobe information of input files
# probe_data = Parallel.map(qc_files) {|file| file.probe}

# probe_data.each_with_index do |probe, index|
#   qc_files[index].store_probe(probe)
# end
#Calculate average phase
# phase_data = Parallel.map(qc_files, in_processes: 1) {|file| file.phase}
# phase_data.each_with_index do |phase, index|
#   qc_files[index].store_phase(phase)
# end